use crate::{
    comp::math_area::MathArea,
    storage::visualization::coloring::presets::{GradientColorPreset, IterationAssignment},
};

/// Description of an image generated by mandel-rs.
///
/// This description can be used to recreate the image exactly as it was.
/// It uses only basic data types. It also knows how to serialize or deserialize itself.
///
/// Descriptions are available in two layers:
///
/// 1. There is the ParamDescription struct which contains all parameters as needed by the
///    current version of the program.
/// 2. There are ParamDescriptionVx structs which contain the parameters as stored on disc
///    or at another location of serialized image information in a certain version.
///
/// Having versioned parameter descriptions allows to create new, even incompatible
/// parameter descriptions while maintaining backwards compatibility.
///
/// The the versioned parameter descriptions know how to convert themselves to and from the
/// complete current parameter description.

/// Full and current description of parameters
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct ParamDescription {
    pub name: String,
    pub center_x: String,
    pub center_y: String,
    pub radius: String,
    pub ratio: String,
    pub max_iteration: u32,
    pub iteration_assignment: IterationAssignment,
    pub color_preset: GradientColorPreset,
    pub stripe_count: u32,
    pub stripe_offset: u32,
}

impl ParamDescription {
    /// Return the math area as business logic object.
    ///
    /// This is expected to always succeed as the consistency of the stored parameters is ensured elsewhere.
    pub fn math_area(&self) -> MathArea {
        MathArea::from_str(&self.center_x, &self.center_y, &self.radius, &self.ratio).unwrap()
    }
}

// end of file
